From: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Date: Wed, 20 Jun 2018 19:22:06 +0200
Subject: Don't allow ubuntu mode extension to update

Ensure that no update is proposed or loaded if sideloaded (always
prefer system version) on the ubuntu session.
We want to ensure that the default code running is going through
our QA and security team process than being loaded from a 3rd
party website.
Also, that will enable us to upload newer versions on GNOME
extension website while still letting older ubuntu release versions
running expected extension version.
Origin: ubuntu
Forwarded: https://bugzilla.gnome.org/show_bug.cgi?id=789852
---
 js/ui/extensionDownloader.js | 12 ++++++++++++
 js/ui/extensionSystem.js     |  9 +++++++++
 2 files changed, 21 insertions(+)

diff --git a/js/ui/extensionDownloader.js b/js/ui/extensionDownloader.js
index 90fc5a6..0ae5ecb 100644
--- a/js/ui/extensionDownloader.js
+++ b/js/ui/extensionDownloader.js
@@ -4,6 +4,7 @@
 const { Clutter, Gio, GLib, GObject, Soup } = imports.gi;
 
 const Config = imports.misc.config;
+const Desktop = imports.misc.desktop;
 const Dialog = imports.ui.dialog;
 const ExtensionUtils = imports.misc.extensionUtils;
 const FileUtils = imports.misc.fileUtils;
@@ -20,6 +21,14 @@ function installExtension(uuid, invocation) {
     let params = { uuid,
                    shell_version: Config.PACKAGE_VERSION };
 
+    if (Desktop.is("ubuntu") && Main.extensionManager.isModeExtension(uuid)) {
+        let title = _("Can't install “%s”:").format(uuid);
+        let msg = _("This is an extension enabled by your current mode, you can't install manually any update in that session.");
+        Main.notifyError(title, msg);
+        invocation.return_dbus_error('org.gnome.Shell.CantInstallError', msg);
+        return;
+    }
+
     let message = Soup.form_request_new_from_hash('GET', REPOSITORY_URL_INFO, params);
 
     _httpSession.queue_message(message, () => {
@@ -139,6 +148,9 @@ function checkForUpdates() {
             return;
         if (extension.hasUpdate)
             return;
+        // don't updates out of repository mode extension
+        if (Desktop.is("ubuntu") && Main.extensionManager.isModeExtension(uuid))
+            return;
         metadatas[uuid] = extension.metadata;
     });
 
diff --git a/js/ui/extensionSystem.js b/js/ui/extensionSystem.js
index 7362a00..4875752 100644
--- a/js/ui/extensionSystem.js
+++ b/js/ui/extensionSystem.js
@@ -4,6 +4,7 @@
 const { GLib, Gio, GObject, Shell, St } = imports.gi;
 const Signals = imports.signals;
 
+const Desktop = imports.misc.desktop;
 const ExtensionDownloader = imports.ui.extensionDownloader;
 const ExtensionUtils = imports.misc.extensionUtils;
 const FileUtils = imports.misc.fileUtils;
@@ -397,6 +398,10 @@ var ExtensionManager = class {
         this.loadExtension(newExtension);
     }
 
+    isModeExtension(uuid) {
+        return this._getModeExtensions().indexOf(uuid) !== -1;
+    }
+
     _callExtensionInit(uuid) {
         if (!Main.sessionMode.allowExtensions)
             return false;
@@ -581,6 +586,10 @@ var ExtensionManager = class {
             let type = dir.has_prefix(perUserDir)
                 ? ExtensionType.PER_USER
                 : ExtensionType.SYSTEM;
+            if (Desktop.is("ubuntu") && this.isModeExtension(uuid) && type === ExtensionType.PER_USER) {
+                log(`Found user extension ${uuid}, but not loading from ${dir.get_path()} directory as part of session mode.`);
+                return;
+            }
             try {
                 extension = this.createExtensionObject(uuid, dir, type);
             } catch (e) {
