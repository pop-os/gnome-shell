Index: gnome-shell/js/ui/sessionMode.js
===================================================================
--- gnome-shell.orig/js/ui/sessionMode.js
+++ gnome-shell/js/ui/sessionMode.js
@@ -90,7 +90,7 @@ const _modes = {
                'keyring', 'autorunManager', 'automountManager'],
 
         panel: {
-            left: ['activities', 'appMenu'],
+            left: ['workspaces', 'applications', 'appMenu'],
             center: ['dateMenu'],
             right: ['dwellClick', 'a11y', 'keyboard', 'aggregateMenu'],
         },
Index: gnome-shell/js/ui/panel.js
===================================================================
--- gnome-shell.orig/js/ui/panel.js
+++ gnome-shell/js/ui/panel.js
@@ -12,6 +12,7 @@ const Overview = imports.ui.overview;
 const PopupMenu = imports.ui.popupMenu;
 const PanelMenu = imports.ui.panelMenu;
 const Main = imports.ui.main;
+const ViewSelector = imports.ui.viewSelector;
 
 var PANEL_ICON_SIZE = 16;
 var APP_MENU_ICON_MARGIN = 0;
@@ -424,32 +425,58 @@ var AppMenuButton = GObject.registerClas
 
 var ActivitiesButton = GObject.registerClass(
 class ActivitiesButton extends PanelMenu.Button {
-    _init() {
+    _init(name = "Activities") {
         super._init(0.0, null, true);
         this.accessible_role = Atk.Role.TOGGLE_BUTTON;
 
-        this.name = 'panelActivities';
+        this.name = 'panel' + name;
 
         /* Translators: If there is no suitable word for "Activities"
            in your language, you can use the word for "Overview". */
-        this._label = new St.Label({ text: _("Activities"),
+        this._label = new St.Label({ text: _(name),
                                      y_align: Clutter.ActorAlign.CENTER });
         this.add_actor(this._label);
 
         this.label_actor = this._label;
 
-        Main.overview.connect('showing', () => {
-            this.add_style_pseudo_class('overview');
-            this.add_accessible_state(Atk.StateType.CHECKED);
+        Main.overview.connect('shown', () => {
+            this.update();
         });
-        Main.overview.connect('hiding', () => {
-            this.remove_style_pseudo_class('overview');
-            this.remove_accessible_state(Atk.StateType.CHECKED);
+        Main.overview.connect('hidden', () => {
+            this.update();
         });
 
+		// This signal cannot be connected until Main.overview is initialized
+		GLib.idle_add(GLib.PRIORITY_DEFAULT, () => {
+            if (Main.overview._initCalled) {
+    			Main.overview.viewSelector.connect('page-changed', () => {
+    				this.update();
+    			});
+    			return GLib.SOURCE_REMOVE;
+            } else {
+                return GLib.SOURCE_CONTINUE;
+            }
+		});
+
         this._xdndTimeOut = 0;
     }
 
+    toggle() {
+        log(this.name + " toggle");
+        Main.overview.toggle();
+    }
+
+    update() {
+        log(this.name + " update: " + Main.overview.visible);
+        if (Main.overview.visible) {
+            this.add_style_pseudo_class('overview');
+            this.add_accessible_state(Atk.StateType.CHECKED);
+        } else {
+            this.remove_style_pseudo_class('overview');
+            this.remove_accessible_state(Atk.StateType.CHECKED);
+        }
+    }
+
     handleDragOver(source, _actor, _x, _y, _time) {
         if (source != Main.xdndHandler)
             return DND.DragMotionResult.CONTINUE;
@@ -477,7 +504,7 @@ class ActivitiesButton extends PanelMenu
         if (event.type() == Clutter.EventType.TOUCH_END ||
             event.type() == Clutter.EventType.BUTTON_RELEASE) {
             if (Main.overview.shouldToggleByCornerOrButton())
-                Main.overview.toggle();
+                this.toggle();
         }
 
         return Clutter.EVENT_PROPAGATE;
@@ -487,7 +514,7 @@ class ActivitiesButton extends PanelMenu
         let symbol = keyEvent.keyval;
         if (symbol == Clutter.KEY_Return || symbol == Clutter.KEY_space) {
             if (Main.overview.shouldToggleByCornerOrButton()) {
-                Main.overview.toggle();
+                this.toggle();
                 return Clutter.EVENT_STOP;
             }
         }
@@ -500,7 +527,7 @@ class ActivitiesButton extends PanelMenu
         let pickedActor = global.stage.get_actor_at_pos(Clutter.PickMode.REACTIVE, x, y);
 
         if (pickedActor == this && Main.overview.shouldToggleByCornerOrButton())
-            Main.overview.toggle();
+            this.toggle();
 
         GLib.source_remove(this._xdndTimeOut);
         this._xdndTimeOut = 0;
@@ -508,6 +535,66 @@ class ActivitiesButton extends PanelMenu
     }
 });
 
+var WorkspacesButton = GObject.registerClass(
+class WorkspacesButton extends ActivitiesButton {
+    _init() {
+        super._init("Workspaces");
+    }
+
+    toggle() {
+        log(this.name + " toggle");
+        let activePage = Main.overview.viewSelector.getActivePage();
+        if (Main.overview.visible && activePage == ViewSelector.ViewPage.WINDOWS) {
+            Main.overview.hide();
+        } else {
+            Main.overview.viewSelector._showAppsButton.checked = false;
+            Main.overview.show();
+        }
+    }
+
+    update() {
+        log(this.name + " update");
+        let activePage = Main.overview.viewSelector.getActivePage();
+        if (Main.overview.visible && activePage == ViewSelector.ViewPage.WINDOWS) {
+            this.add_style_pseudo_class('overview');
+            this.add_accessible_state(Atk.StateType.CHECKED);
+        } else {
+            this.remove_style_pseudo_class('overview');
+            this.remove_accessible_state(Atk.StateType.CHECKED);
+        }
+    }
+});
+
+var ApplicationsButton = GObject.registerClass(
+class ApplicationsButton extends ActivitiesButton {
+    _init() {
+        super._init("Applications");
+    }
+
+    toggle() {
+        log(this.name + " toggle");
+        let activePage = Main.overview.viewSelector.getActivePage();
+        if (Main.overview.visible && activePage == ViewSelector.ViewPage.APPS) {
+            Main.overview.hide();
+        } else {
+            Main.overview.viewSelector._showAppsButton.checked = true;
+            Main.overview.show();
+        }
+    }
+
+    update() {
+        log(this.name + " update");
+        let activePage = Main.overview.viewSelector.getActivePage();
+        if (Main.overview.visible && activePage == ViewSelector.ViewPage.APPS) {
+            this.add_style_pseudo_class('overview');
+            this.add_accessible_state(Atk.StateType.CHECKED);
+        } else {
+            this.remove_style_pseudo_class('overview');
+            this.remove_accessible_state(Atk.StateType.CHECKED);
+        }
+    }
+});
+
 var PanelCorner = GObject.registerClass(
 class PanelCorner extends St.DrawingArea {
     _init(side) {
@@ -783,7 +870,8 @@ class AggregateMenu extends PanelMenu.Bu
 });
 
 const PANEL_ITEM_IMPLEMENTATIONS = {
-    'activities': ActivitiesButton,
+    'workspaces': WorkspacesButton,
+    'applications': ApplicationsButton,
     'aggregateMenu': AggregateMenu,
     'appMenu': AppMenuButton,
     'dateMenu': imports.ui.dateMenu.DateMenuButton,
