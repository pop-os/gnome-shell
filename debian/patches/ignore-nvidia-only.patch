Index: gnome-shell/src/shell-app.c
===================================================================
--- gnome-shell.orig/src/shell-app.c	2022-03-10 17:10:35.298456149 -0700
+++ gnome-shell/src/shell-app.c	2022-03-10 17:10:35.290456030 -0700
@@ -1383,6 +1383,8 @@
   gboolean ret;
   GSpawnFlags flags;
   gboolean discrete_gpu = FALSE;
+  gboolean nvidia_only = FALSE;
+  const gchar *vendor;
 
   if (app->info == NULL)
     {
@@ -1397,6 +1399,13 @@
       return TRUE;
     }
 
+  /* Even if multiple GPUs are available, the system may be running in "NVIDIA
+   * only" mode. We don't want to apply PRIME variables in that case.
+   */
+  vendor = shell_util_get_gl_vendor ();
+  nvidia_only = g_strcmp0 (vendor, "NVIDIA Corporation") == 0 ||
+                g_strcmp0 (vendor, "nouveau") == 0;
+
   global = shell_global_get ();
   context = shell_global_create_app_launch_context (global, timestamp, workspace);
   if (gpu_pref == SHELL_APP_LAUNCH_GPU_APP_PREF)
@@ -1404,7 +1413,7 @@
   else
     discrete_gpu = (gpu_pref == SHELL_APP_LAUNCH_GPU_DISCRETE);
 
-  if (discrete_gpu)
+  if (discrete_gpu && !nvidia_only)
     apply_discrete_gpu_env (context, global);
 
   /* Set LEAVE_DESCRIPTORS_OPEN in order to use an optimized gspawn
Index: gnome-shell/src/shell-util.c
===================================================================
--- gnome-shell.orig/src/shell-util.c	2022-03-10 17:10:35.298456149 -0700
+++ gnome-shell/src/shell-util.c	2022-03-10 17:10:35.290456030 -0700
@@ -354,6 +354,22 @@
 
 typedef const gchar *(*ShellGLGetString) (GLenum);
 
+const gchar *
+shell_util_get_gl_vendor (void)
+{
+  static const gchar *vendor = NULL;
+
+  if (!vendor)
+    {
+      ShellGLGetString gl_get_string;
+      gl_get_string = (ShellGLGetString) cogl_get_proc_address ("glGetString");
+      if (gl_get_string)
+        vendor = gl_get_string (GL_VENDOR);
+    }
+
+  return vendor;
+}
+
 cairo_surface_t *
 shell_util_composite_capture_images (ClutterCapture  *captures,
                                      int              n_captures,
Index: gnome-shell/src/shell-util.h
===================================================================
--- gnome-shell.orig/src/shell-util.h	2022-03-10 17:10:35.298456149 -0700
+++ gnome-shell/src/shell-util.h	2022-03-10 17:10:35.294456090 -0700
@@ -46,6 +46,8 @@
                                                int                height,
                                                int                rowstride);
 
+const gchar *shell_util_get_gl_vendor (void);
+
 cairo_surface_t * shell_util_composite_capture_images (ClutterCapture  *captures,
                                                        int              n_captures,
                                                        int              x,
Index: gnome-shell/js/ui/appMenu.js
===================================================================
--- gnome-shell.orig/js/ui/appMenu.js	2022-03-10 16:37:58.311462928 -0700
+++ gnome-shell/js/ui/appMenu.js	2022-03-10 17:12:59.199902740 -0700
@@ -168,8 +168,11 @@
         const proxy = global.get_switcheroo_control();
         const hasDualGpu = proxy?.get_cached_property('HasDualGpu')?.unpack();
 
+        const vendor = Shell.util_get_gl_vendor();
+        const nvidia_only = vendor == "NVIDIA Corporation" || vendor == "nouveau";
+
         const showItem =
-            this._app?.state === Shell.AppState.STOPPED && hasDualGpu;
+            this._app?.state === Shell.AppState.STOPPED && hasDualGpu && !nvidia_only;
 
         this._onGpuMenuItem.visible = showItem;
 
